Functionality:
- We want it to be able to record mouse and keyboard movements, and replicate it
  - Both either in regular speed or hastened speed
- We want it to have the functionality of verifying whether the current screen is
  looking as it should.

Documentation:
pynput - https://pypi.org/project/pynput/#description
pyautogui - https://pyautogui.readthedocs.io/en/latest/index.html
os.path - https://docs.python.org/3/library/os.path.html
time - https://docs.python.org/3/library/time.html
reading and writing files - https://www.guru99.com/reading-and-writing-files-in-python.html

LOG:
<<<<<< commit d36118d00acd3ab042ba29ab1f27ec682a2f2ca0 >>>>>>

I will now copy and paste the tester file from LeagueBot into this project, that
file should have the basic pynput framework established.

- LeagueBot tester imported

Note: All functions should take at least 1 argument, even if that argument is
expected to be an empty list of arguments

- created functions.py which should house all the functions
- set up the basic main function framework
- Figured out how to set a timer
- Completed the timing system
- Completed the variable assignments of duration and name

Ready to begin writing and recording to a new file.


<<<<<< commit 068e8025ae66074b4b3a7bfb2088f7d5fc3cc31f >>>>>>

I am ready to begin writing and recording to new files

Note: The mouse position and whatnot are recorded as ratios to ensure that the
recordings work on screens of the same aspect ratio, but different dimensions.

I noticed there was a problem with my retString approach, therefore I am going
to try to revert back to the write-as-you-go strategy.


<<<<<< commit f1c9ed9c5036f15d3e1d0e953423d1d6132f9e6a >>>>>>

Write-as-you-go strategy adopted, seems to be going smoothly so far

- Implemented all mouse_listener functions
- Implemented all key_listener functions
- I think record() funcion is complete

Now we should create a "perform" function that analyses and replicates a recording


<<<<<< commit 1cc4e310c41d777e61b2ad12becc1336a214d26c >>>>>>

It has occurred to me that our function mightn't release all keys at the end of
operations, would that be a problem?

Also, there appears to be a strange character in first.txt. I am unsure of its
cause and whether it would interfere in its operations.

I realized that since each input is independent, it would be wise to have each
input running parallel to each other.

I have now figured out how to run functions in parallel and it has been Implemented
in tester.py

TODO:
- Create some sort of function to construct a list of tasks
- Create a function to interpret that list of tasks and translate it into action.

I realized that the original pynput listeners get angry when I use shortcuts. I
think we'll just have to work around this.

<<<<<<<<{{{ commit fc346f91aa2ae180cc763568778110674e534391 }}}>>>>>>>>
Beginning implementation of serialization lists

- Altered the main function so that I don't need to keep adding functions to it
  as I go.
- Implemented the basics of serialization of tasks

TODO: Need to figure out how to make the listener listen to both hotkeys and
regular keystrokes
TODO: Let's create a "settings" file which holds all the custom settings for the
program and can be edited and saved by the user.
